{"version":3,"sources":["components/Task.js","components/EditableTask.js","App.js","serviceWorker.js","index.js"],"names":["CompleteButton","withStyles","theme","root","color","palette","getContrastText","green","backgroundColor","Button","DeleteButton","marginLeft","red","useStyles","makeStyles","task","height","margin","maxWidth","minWidth","taskComplete","background","Task","data","handleUpdateTask","classes","useState","taskInfo","setInfo","isLoading","setLoading","useEffect","isDeleted","Card","className","clsx","status","style","CardActionArea","onClick","CardContent","Typography","gutterBottom","variant","component","name","description","Divider","CardActions","disableSpacing","disabled","size","appBar","position","title","spacing","flex","taskForm","display","justifyContent","alignContent","flexDirection","textInput","Transition","React","forwardRef","props","ref","Slide","direction","EditableTask","open","handleClose","taskDataToUpdate","setData","errors","setErrors","handleChange","event","field","target","value","saveData","id","Math","floor","random","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","aria-label","autoFocus","error","Object","keys","map","key","length","find","el","Container","TextField","label","onChange","e","helperText","multiline","FormControl","InputLabel","Select","labelId","MenuItem","FormHelperText","width","overflow","alignItems","flexWrap","fab","bottom","right","common","white","JSONdb","App","db","setDB","openEditTask","setOpenEditTask","setTaskDataToUpdate","openForm","dataToUpdate","Fab","updateIndex","findIndex","element","newData","update","$merge","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.897d2cf5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nconst CompleteButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(green[500]),\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst DeleteButton = withStyles((theme) => ({\r\n  root: {\r\n    marginLeft: 'auto',\r\n    color: theme.palette.getContrastText(red[700]),\r\n    backgroundColor: red[700],\r\n    '&:hover': {\r\n      backgroundColor: red[900],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  task: {\r\n    height: 'fit-content;',\r\n    margin: '35px;',\r\n    maxWidth: '800px;',\r\n    minWidth: '300px;',\r\n  },\r\n  taskComplete: {\r\n    background: '#4caf50'\r\n  },\r\n}));\r\n\r\nfunction Task({ data, handleUpdateTask }) {\r\n  const classes = useStyles()\r\n\r\n  const [taskInfo, setInfo] = useState(data)\r\n\r\n  const [isLoading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setInfo(data)\r\n    setLoading(false)\r\n  }, [data])\r\n\r\n  const completeTask = () => {\r\n    setInfo({ ...taskInfo, status: \"Завершено\" })\r\n  }\r\n\r\n  const deleteTask = () => {\r\n    setInfo({ ...taskInfo, isDeleted: true })\r\n  }\r\n\r\n  return (\r\n    isLoading ? <></> :\r\n      taskInfo.isDeleted ? <></> :\r\n        <Card\r\n          className={clsx(classes.task, taskInfo.status === \"Завершено\" && classes.taskComplete)}\r\n          style={{ backgroundColor: taskInfo.status === \"Завершено\" && \"#b4e8b4\" }}>\r\n          <CardActionArea onClick={() => handleUpdateTask(taskInfo)}>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {taskInfo.name}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {taskInfo.description}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <Divider />\r\n          <CardActions disableSpacing>\r\n            <CompleteButton disabled={taskInfo.status === \"Завершено\"} onClick={completeTask} size=\"medium\">{taskInfo.status === \"Завершено\" ? 'Завершено' : 'Завершить'}</CompleteButton>\r\n            <DeleteButton onClick={deleteTask} size=\"medium\">{'Удалить'}</DeleteButton>\r\n          </CardActions>\r\n        </Card>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { Container } from '@material-ui/core';\r\nimport { green } from '@material-ui/core/colors';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n        background: green[500],\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    taskForm: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        flexDirection: \"column\",\r\n    },\r\n    textInput: {\r\n        margin: '25px 0px',\r\n    },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction EditableTask({ open, handleClose, taskDataToUpdate }) {\r\n    useEffect(() => {\r\n        if (taskDataToUpdate) {\r\n            setData(taskDataToUpdate)\r\n        } else {\r\n            setData({\r\n                name: '',\r\n                description: '',\r\n                status: ''\r\n            })\r\n        }\r\n    }, [taskDataToUpdate])\r\n\r\n    const classes = useStyles();\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: ''\r\n    })\r\n    const [errors, setErrors] = useState({\r\n        name: false,\r\n        description: false,\r\n        status: false,\r\n    })\r\n    const handleChange = (event, field) => {\r\n        setData({ ...data, [field]: event.target.value })\r\n    }\r\n\r\n    const handleConfirm = () => {\r\n        let error = {}\r\n        const detectErrors = Object.keys(data).map(key => {\r\n            if (data[key].length === 0) {\r\n                error[key] = true\r\n                return true\r\n            }\r\n            else {\r\n                error[key] = false\r\n                return false\r\n            }\r\n        })\r\n        if (detectErrors.find(el => el === true)) {\r\n            setErrors(error)\r\n        } else {\r\n\r\n            saveData()\r\n        }\r\n\r\n    }\r\n\r\n    const saveData = () => {\r\n        setErrors({\r\n            name: false,\r\n            description: false,\r\n            status: false,\r\n        })\r\n        if (taskDataToUpdate) {\r\n            handleClose({ ...data })\r\n        } else {\r\n            handleClose({\r\n                id: Math.floor(Math.random() * Math.floor(100000)) + '',\r\n                ...data,\r\n                isDeleted: false,\r\n            })\r\n        }\r\n\r\n        setData({\r\n            name: '',\r\n            description: '',\r\n            status: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Dialog fullScreen open={open} onClose={() => handleClose()} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        onClick={() => handleClose()}\r\n                        aria-label=\"close\">\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {taskDataToUpdate ? \"Изменить задание\" : \"Новое задание\"}\r\n                    </Typography>\r\n                    <Button autoFocus color=\"inherit\" onClick={handleConfirm}>\r\n                        Сохранить\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container className={classes.taskForm}>\r\n                <TextField\r\n                    className={classes.textInput}\r\n                    id=\"task-name\"\r\n                    label=\"Название\"\r\n                    onChange={(e) => handleChange(e, 'name')}\r\n                    error={errors.name}\r\n                    value={data.name}\r\n                    helperText={errors.name && 'Поле не должно быть пустым'}\r\n                />\r\n                <TextField\r\n                    className={classes.textInput}\r\n                    id=\"task-description\"\r\n                    label=\"Описание\"\r\n                    multiline\r\n                    onChange={(e) => handleChange(e, 'description')}\r\n                    error={errors.description}\r\n                    value={data.description}\r\n                    helperText={errors.description && 'Поле не должно быть пустым'}\r\n                />\r\n                <FormControl className={classes.textInput} error={errors.status}>\r\n                    <InputLabel id=\"task-status\">Состояние</InputLabel>\r\n                    <Select\r\n                        labelId=\"task-status\"\r\n                        id=\"task-status\"\r\n                        value={data.status}\r\n                        onChange={(e) => handleChange(e, 'status')}\r\n                    >\r\n\r\n                        <MenuItem value={'В процессе'}>В процессе</MenuItem>\r\n                        <MenuItem value={'Завершено'}>Завершено</MenuItem>\r\n                    </Select>\r\n                    <FormHelperText>{errors.status && 'Поле не должно быть пустым'}</FormHelperText>\r\n                </FormControl>\r\n            </Container>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EditableTask;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Task from './components/Task'\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport EditableTask from './components/EditableTask'\nimport update from 'react-addons-update';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'auto',\n    display: 'flex',\n    justifyContent: 'space-evenly;',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  },\n  fab: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[600],\n    }\n  },\n}));\n\nconst JSONdb = [\n  {\n    id: \"1\",\n    name: \"Task1\",\n    status: \"В процессе\",\n    description: \"Особое задание для продвинутых\",\n    isDeleted: false,\n  },\n  {\n    id: \"2\",\n    name: \"Task2\",\n    status: \"В процессе\",\n    description: \"Очень простое задание\",\n    isDeleted: false,\n  },\n  {\n    id: \"3\",\n    name: \"Task3\",\n    status: \"В процессе\",\n    description: \"Тут нужно подумать\",\n    isDeleted: false,\n  },\n  {\n    id: \"4\",\n    name: \"Task4\",\n    status: \"В процессе\",\n    description: \"Особое задание для продвинутых\",\n    isDeleted: false,\n  },\n  {\n    id: \"5\",\n    name: \"Task5\",\n    status: \"В процессе\",\n    description: \"Очень простое задание\",\n    isDeleted: false,\n  },\n  {\n    id: \"6\",\n    name: \"Task6\",\n    status: \"В процессе\",\n    description: \"Тут нужно подумать\",\n    isDeleted: false,\n  },\n]\n\nfunction App() {\n  const classes = useStyles();\n  const [db, setDB] = useState([...JSONdb])\n  const [openEditTask, setOpenEditTask] = useState(false)\n  const [taskDataToUpdate, setTaskDataToUpdate] = useState(null)\n\n  const addTask = (data) => {\n    if (data) {\n      const updateIndex = db.findIndex(element => element.id === data.id)\n      if (updateIndex !== -1) {\n        const newData = update(db, {\n          [updateIndex]: {$merge: data}\n        })\n        setDB([...newData])\n      } else {\n        setDB([...db, data])\n      }\n    }\n    setTaskDataToUpdate(null)\n    setOpenEditTask(false)\n  }\n\n  const openForm = (dataToUpdate) => {\n    if (dataToUpdate) {\n      setTaskDataToUpdate(dataToUpdate)\n      setOpenEditTask(true)\n    } else {\n      setTaskDataToUpdate(null)\n      setOpenEditTask(true)\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      {db.map(task => {\n        return <Task key={task.id} data={task} handleUpdateTask={openForm} />\n      })}\n      <Fab\n        className={classes.fab} aria-label=\"add\"\n        onClick={() => openForm(null)}>\n        <AddIcon />\n      </Fab>\n      <EditableTask taskDataToUpdate={taskDataToUpdate} open={openEditTask} handleClose={addTask} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}