{"version":3,"sources":["components/EditableTask.js"],"names":["useStyles","makeStyles","theme","appBar","position","background","green","title","marginLeft","spacing","flex","taskForm","display","justifyContent","alignContent","flexDirection","textInput","margin","Transition","React","forwardRef","props","ref","direction","EditableTask","open","handleClose","taskDataToUpdate","useEffect","setData","name","description","status","classes","useState","data","errors","setErrors","handleChange","event","field","target","value","saveData","id","Math","floor","random","isDeleted","fullScreen","onClose","TransitionComponent","className","edge","color","onClick","aria-label","variant","autoFocus","error","Object","keys","map","key","length","find","el","label","onChange","e","helperText","multiline","labelId"],"mappings":"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","file":"static/js/4.5a33cad7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { Container } from '@material-ui/core';\r\nimport { green } from '@material-ui/core/colors';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n        background: green[500],\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    taskForm: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        flexDirection: \"column\",\r\n    },\r\n    textInput: {\r\n        margin: '25px 0px',\r\n    },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction EditableTask({ open, handleClose, taskDataToUpdate }) {\r\n    useEffect(() => {\r\n        if (taskDataToUpdate) {\r\n            setData(taskDataToUpdate)\r\n        } else {\r\n            setData({\r\n                name: '',\r\n                description: '',\r\n                status: ''\r\n            })\r\n        }\r\n    }, [taskDataToUpdate])\r\n\r\n    const classes = useStyles();\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: ''\r\n    })\r\n    const [errors, setErrors] = useState({\r\n        name: false,\r\n        description: false,\r\n        status: false,\r\n    })\r\n    const handleChange = (event, field) => {\r\n        setData({ ...data, [field]: event.target.value })\r\n    }\r\n\r\n    const handleConfirm = () => {\r\n        let error = {}\r\n        const detectErrors = Object.keys(data).map(key => {\r\n            if (data[key].length === 0) {\r\n                error[key] = true\r\n                return true\r\n            }\r\n            else {\r\n                error[key] = false\r\n                return false\r\n            }\r\n        })\r\n        if (detectErrors.find(el => el === true)) {\r\n            setErrors(error)\r\n        } else {\r\n\r\n            saveData()\r\n        }\r\n\r\n    }\r\n\r\n    const saveData = () => {\r\n        setErrors({\r\n            name: false,\r\n            description: false,\r\n            status: false,\r\n        })\r\n        if (taskDataToUpdate) {\r\n            handleClose({ ...data })\r\n        } else {\r\n            handleClose({\r\n                id: Math.floor(Math.random() * Math.floor(100000)) + '',\r\n                ...data,\r\n                isDeleted: false,\r\n            })\r\n        }\r\n\r\n        setData({\r\n            name: '',\r\n            description: '',\r\n            status: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Dialog fullScreen open={open} onClose={() => handleClose()} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        onClick={() => handleClose()}\r\n                        aria-label=\"close\">\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {taskDataToUpdate ? \"Изменить задание\" : \"Новое задание\"}\r\n                    </Typography>\r\n                    <Button autoFocus color=\"inherit\" onClick={handleConfirm}>\r\n                        Сохранить\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container className={classes.taskForm}>\r\n                <TextField\r\n                    className={classes.textInput}\r\n                    id=\"task-name\"\r\n                    label=\"Название\"\r\n                    onChange={(e) => handleChange(e, 'name')}\r\n                    error={errors.name}\r\n                    value={data.name}\r\n                    helperText={errors.name && 'Поле не должно быть пустым'}\r\n                />\r\n                <TextField\r\n                    className={classes.textInput}\r\n                    id=\"task-description\"\r\n                    label=\"Описание\"\r\n                    multiline\r\n                    onChange={(e) => handleChange(e, 'description')}\r\n                    error={errors.description}\r\n                    value={data.description}\r\n                    helperText={errors.description && 'Поле не должно быть пустым'}\r\n                />\r\n                <FormControl className={classes.textInput} error={errors.status}>\r\n                    <InputLabel id=\"task-status\">Состояние</InputLabel>\r\n                    <Select\r\n                        labelId=\"task-status\"\r\n                        id=\"task-status\"\r\n                        value={data.status}\r\n                        onChange={(e) => handleChange(e, 'status')}\r\n                    >\r\n\r\n                        <MenuItem value={'В процессе'}>В процессе</MenuItem>\r\n                        <MenuItem value={'Завершено'}>Завершено</MenuItem>\r\n                    </Select>\r\n                    <FormHelperText>{errors.status && 'Поле не должно быть пустым'}</FormHelperText>\r\n                </FormControl>\r\n            </Container>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EditableTask;\r\n"],"sourceRoot":""}