{"version":3,"sources":["styles/global.scss","db/TempateDB.js","db/dbApi.js","redux/reducers/userSlice.js","requests/Request.js","components/login/LoginForm.js","pages/Login.js","AuthRoute.js","redux/reducers/challengesSlice.js","redux/reducers/tasksSlice.js","components/challenges/Challenge.js","components/loading/Loading.js","components/challenges/ChallengesList.js","pages/Challenges.js","components/tasks/Task.js","components/tasks/TasksList.js","pages/Tasks.js","components/menu/Menu.js","PagesConstructor.js","App.js","serviceWorker.js","redux/store.js","index.js","styles/Task.module.scss","styles/theme.scss","styles/Menu.module.scss","styles/LoginForm.module.scss","styles/Challenge.module.scss","styles/LoginPage.module.scss","styles/Loading.module.scss","styles/ChallengesList.module.scss","styles/TasksList.module.scss"],"names":["module","exports","db","Dexie","version","stores","user","tasks","challenges","on","add","_id","bulkAdd","setUserId","id","put","then","catch","err","console","log","updateTask","report","images","state","update","userSlice","createSlice","name","initialState","isLogin","reducers","logIn","action","logOut","updateUser","payload","actions","ChallengesRequest","navigator","onLine","axios","get","response","status","data","toArray","TasksRequest","UpdateTaskRequest","task","LoginForm","dispatch","useDispatch","useState","code","loginData","setLoginData","setErr","handleChange","e","field","target","value","className","styles","background","Typography","TextField","loginInput","color","label","onChange","error","Boolean","helperText","type","Button","onClick","preventDefault","tempErr","Object","entries","map","item","keys","length","find","LoginRequest","loginButton","variant","Login","PublicRoute","Component","component","restricted","rest","useSelector","render","props","to","PrivateRoute","page","challengesSLice","items","clear","bulkPut","tasksSlice","elements","addTask","updateTasks","updateReport","existingTask","updateTaskState","toggleEditForm","Challenge","userId","acceptedChallenges","challenge","Card","CardMedia","alt","height","image","title","CardContent","gutterBottom","description","challengeInfo","maxScore","date","d","Date","getDate","getMonth","getFullYear","parseDate","finishDate","CardActions","post","AcceptChallengeRequest","challengeId","score","acceptButton","disabled","indexOf","Loading","loadingContainer","CircularProgress","ChallengesList","useEffect","Fragment","key","Challenges","Task","InProgress","Moderation","Confirmed","Declined","Cancelled","taskState","isSave","setIsSaved","expanded","setExpanded","reportData","setReportData","errors","setErrors","handleUpdateTaskState","taskToUpdate","imagex","checkErrors","el","IconButton","clsx","expand","expandOpen","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","reportBackground","multiline","event","saveReportButton","size","TasksList","Tasks","Menu","setPage","BottomNavigation","showLabels","newValue","BottomNavigationAction","selected","icon","Link","PagesConstructor","Page","App","isLoading","setLoading","LoginByIdRequest","basename","path","exact","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","configureStore","reducer","tasksReducer","userReducer","challengesReducer","defaults","baseURL","themeMui","createMuiTheme","palette","primary","light","theme","primaryLight","main","primaryMain","dark","primaryDark","contrastText","primaryText","secondary","secondaryLight","secondaryMain","secondaryDark","secondaryText","typography","fontFamily","join","URL","process","href","origin","addEventListener","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker","ReactDOM","StrictMode","store","StylesProvider","injectFirst","ThemeProvider","document","getElementById","Notification","requestPermission"],"mappings":"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","file":"static/js/main.b7350f88.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\"};","import Dexie from 'dexie'\r\n\r\nexport const db = new Dexie('db')\r\ndb.version(1).stores({\r\n    user: \"user\",\r\n    tasks: \"_id\",\r\n    challenges: \"_id\",\r\n})\r\n\r\ndb.on(\"populate\", () => {\r\n    db.user.add({user : 'singleUserId', _id: null})\r\n    db.tasks.bulkAdd([])\r\n    db.challenges.bulkAdd([])\r\n})","import { db } from './TempateDB'\r\n\r\nexport const getUserId = () => {\r\n    return db.user.get('singleUserId').then(user => {\r\n        return user._id\r\n    })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\nexport const setUserId = (id) => {\r\n    return db.user.put({ user: 'singleUserId', _id: id })\r\n        .then(() => true)\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const saveTasks = (tasks) => {\r\n    db.tasks.clear()\r\n    return db.tasks.bulkPut([...tasks])\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return db.tasks.put(task)\r\n}\r\n\r\nexport const updateTask = (_id, report, images, state) => {\r\n    return db.tasks.update(_id, {report: report, images: [...images], state: state})\r\n}\r\n\r\nexport const saveChallenges = (challenges) => {\r\n    db.challenges.clear()\r\n    return db.challenges.bulkPut([...challenges])\r\n}\r\n\r\nexport const getTasks = () => {\r\n    return db.tasks.get()\r\n        .toArray()\r\n}\r\n\r\nexport const getChallenges = () => {\r\n    return db.challenges.get()\r\n        .toArray()\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLogin : false,\r\n    user: null\r\n}\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        logIn: (state, action) => {\r\n            //state.user = action.payload\r\n            state.isLogin = true\r\n        },\r\n        logOut: state => {\r\n            //state.user = null\r\n            state.isLogin = false\r\n        },\r\n        updateUser: (state, action) => {\r\n            state.user = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const { logIn, logOut, updateUser } = userSlice.actions\r\n\r\nexport default userSlice.reducer","import axios from 'axios'\r\nimport { getChallenges, getTasks } from '../db/dbApi'\r\n\r\nexport const LoginRequest = ({ name, code }) => {\r\n    return axios.get('/users')\r\n        .then(response => {\r\n            if (response.status === 200) {\r\n                const user = response.data.find(user => user.name === name && user.code === code)\r\n                if (user) return user\r\n                else return false\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        .catch(err => {\r\n            return false\r\n        })\r\n}\r\n\r\nexport const LoginByIdRequest = (id) => {\r\n    return axios.get(`/users/${id}`)\r\n        .then(response => {\r\n            if (response.status === 200) {\r\n                return response.data\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        .catch(err => {\r\n            return false\r\n        })\r\n}\r\n\r\nexport const ChallengesRequest = () => {\r\n    return navigator.onLine ?\r\n        axios.get('/challenges')\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return response.data\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                return false\r\n            }) :\r\n        getChallenges()\r\n}\r\n\r\nexport const AcceptChallengeRequest = (data) =>\r\n    axios.post('challenges/accept', data)\r\n        .then(response => {\r\n            if (response.status === 201) {\r\n                return response.data\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        .catch(err => {\r\n            return false\r\n        })\r\n\r\nexport const TasksRequest = (id) => {\r\n    return navigator.onLine ?\r\n        axios.get(`tasks/user/${id}`)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return response.data\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                return false\r\n            }) :\r\n        getTasks()\r\n}\r\n\r\nexport const UpdateTaskRequest = (task) =>\r\n    axios.put(`tasks/`, task)\r\n        .then(response => {\r\n            if (response.status === 200) {\r\n                return response.data\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        .catch(err => {\r\n            return false\r\n        })","import { Button, TextField, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setUserId } from '../../db/dbApi'\r\nimport { logIn, updateUser } from '../../redux/reducers/userSlice'\r\nimport { LoginRequest } from '../../requests/Request'\r\nimport styles from '../../styles/LoginForm.module.scss'\r\n\r\nexport const LoginForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [loginData, setLoginData] = useState({\r\n        name: '',\r\n        code: ''\r\n    })\r\n\r\n    const [err, setErr] = useState({})\r\n\r\n    const handleChange = (e, field) => {\r\n        setLoginData({ ...loginData, [field]: e.target.value })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        let tempErr = {}\r\n        Object.entries(loginData).map(item => {\r\n            if (item[1] === '') tempErr[item[0]] = true\r\n        })\r\n        if (Object.keys(tempErr).length > 0) {\r\n            setErr(tempErr)\r\n        } else {\r\n            setErr(tempErr)\r\n            LoginRequest(loginData)\r\n                .then(user => {\r\n                    if (user) {\r\n                        setUserId(user._id)\r\n                        dispatch(updateUser(user))\r\n                        dispatch(logIn())\r\n                    } else {\r\n                        setErr({\r\n                            name: true,\r\n                            code: true\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.background}>\r\n            <Typography className=\"login-title\">Войдите в систему</Typography>\r\n            <form>\r\n                <TextField\r\n                    className={styles.loginInput}\r\n                    color=\"secondary\"\r\n                    id=\"login-name\"\r\n                    label=\"Логин\"\r\n                    onChange={(e) => handleChange(e, 'name')}\r\n                    error={Boolean(err.name)}\r\n                    value={loginData.name}\r\n                    helperText={Boolean(err.name) && 'Неправильный логин'}\r\n                />\r\n                <TextField\r\n                    className={styles.loginInput}\r\n                    color=\"secondary\"\r\n                    id=\"login-code\"\r\n                    label=\"Пароль\"\r\n                    type=\"password\"\r\n                    onChange={(e) => handleChange(e, 'code')}\r\n                    error={Boolean(err.code)}\r\n                    value={loginData.code}\r\n                    helperText={Boolean(err.code) && 'Неправильный пароль'}\r\n                />\r\n                <Button type='submit' onClick={handleSubmit} className={styles.loginButton} variant=\"contained\">\r\n                    Войти\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { LoginForm } from '../components/login/LoginForm'\r\nimport styles from '../styles/LoginPage.module.scss'\r\n\r\nexport const Login = () => {\r\n    return (\r\n        <div className={styles.background}>\r\n            <LoginForm />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\nexport const PublicRoute = ({ component: Component, restricted, ...rest }) => {\r\n\r\n    const isLogin = useSelector(state => state.user.isLogin)\r\n\r\n    return (\r\n        // restricted = false meaning public route\r\n        // restricted = true meaning restricted route\r\n        <Route {...rest} render={props => (\r\n            isLogin && restricted ?\r\n                <Redirect to=\"/tasks\" />\r\n                : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport const PrivateRoute = ({ component: Component, page, ...rest }) => {\r\n\r\n    const isLogin = useSelector(state => state.user.isLogin)\r\n\r\n    return (\r\n        // Show the component only when the user is logged in\r\n        // Otherwise, redirect the user to /signin page\r\n        <Route {...rest} render={props => (\r\n            isLogin ?\r\n                <Component page={page} {...props} />\r\n                : <Redirect to=\"/login\" />\r\n        )} />\r\n    );\r\n};","import { createSlice } from '@reduxjs/toolkit'\r\nimport { saveChallenges } from '../../db/dbApi'\r\n\r\nconst initialState = {\r\n    items: []\r\n}\r\n\r\nconst challengesSLice = createSlice({\r\n    name: 'challenges',\r\n    initialState,\r\n    reducers: {\r\n        update: (state, action) => {\r\n            state.items = [...action.payload]\r\n            saveChallenges(action.payload)\r\n        }\r\n    }\r\n})\r\n\r\nexport const { update } = challengesSLice.actions\r\n\r\nexport default challengesSLice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\nimport { saveTasks, updateTask, saveTask } from '../../db/dbApi'\r\n\r\nconst initialState = {\r\n    elements: []\r\n}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        addTask: (state, action) => {\r\n/*             const newTaskChallengeId = action.payload.challenge._id\r\n            existingTask = state.elements.find(task => task.challenge._id === newTaskChallengeId && task.state === \"InProgress\")\r\n            if (existingTask) {\r\n                existingTask._id = action.payload._id\r\n            } */\r\n            state.elements = [...state.elements, action.payload]\r\n            saveTask(action.payload)\r\n        },\r\n        updateTasks: (state, action) => {\r\n            state.elements = action.payload\r\n            saveTasks(action.payload)\r\n        },\r\n        updateReport: (state, action) => {\r\n            const { _id, report, images } = action.payload\r\n            const existingTask = state.elements.find(task => task._id === _id)\r\n            if (existingTask) {\r\n                existingTask.report = report\r\n                existingTask.images = images\r\n                updateTask(_id, report, images, existingTask.state)\r\n            }\r\n        },\r\n        updateTaskState: (state, action) => {\r\n            const existingTask = state.elements.find(task => task._id === action.payload._id)\r\n            if (existingTask) {\r\n                existingTask.state = action.payload.state\r\n                updateTask(existingTask._id, existingTask.report, existingTask.images, existingTask.state)\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { toggleEditForm, updateTasks, addTask, updateReport, updateTaskState } = tasksSlice.actions\r\n\r\nexport default tasksSlice.reducer","import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from '../../styles/Challenge.module.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AcceptChallengeRequest } from '../../requests/Request'\r\nimport { addTask } from '../../redux/reducers/tasksSlice';\r\n\r\nexport const Challenge = ({ data }) => {\r\n\r\n    const parseDate = (date) => {\r\n        const d = new Date(date)\r\n        return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userId = useSelector(state => state.user.user._id)\r\n    const acceptedChallenges = useSelector(\r\n        state => state.tasks.elements.map(task => {\r\n            if (task.state !== \"Cancelled\") {\r\n                return task.challenge._id\r\n            }\r\n        }))\r\n\r\n    const handleAcceptChallenge = () => {\r\n        //dispatch(addTask({ _id: Date.now(), user: userId, state: \"InProgress\", score: 0, challenge: data, report: '', images: [] }))\r\n        AcceptChallengeRequest({\r\n            challengeId: data._id,\r\n            userId: userId\r\n        }).then(task => {\r\n            if (task) {\r\n                dispatch(addTask({ ...task, score: 0, challenge: data, report: '', images: [] }))\r\n            } else {\r\n                console.log('err to add task')\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className={styles.background}>\r\n            <CardMedia\r\n                component=\"img\"\r\n                alt=\"task image\"\r\n                height=\"180\"\r\n                image={data.image}\r\n                title=\"Task\"\r\n            />\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom variant=\"h6\" component=\"h2\">\r\n                    {data.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {data.description}\r\n                </Typography>\r\n                <div className={styles.challengeInfo}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {`Очки: ${data.maxScore}`}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {`Истекает: ${parseDate(data.finishDate)}`}\r\n                    </Typography>\r\n                </div>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button\r\n                    onClick={handleAcceptChallenge}\r\n                    className={styles.acceptButton}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    disabled={acceptedChallenges.indexOf(data._id) !== -1}>\r\n                    {acceptedChallenges.indexOf(data._id) === -1 ?\r\n                        'Принять челендж' : 'Вы уже взяли этот челендж'}\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}","import { CircularProgress } from '@material-ui/core'\r\nimport React from 'react'\r\nimport styles from '../../styles/Loading.module.scss'\r\n\r\nexport const Loading = () => {\r\n\r\n    return (\r\n        <div className={styles.loadingContainer}>\r\n            <CircularProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { update } from '../../redux/reducers/challengesSlice'\r\nimport { ChallengesRequest } from '../../requests/Request'\r\nimport { Challenge } from './Challenge'\r\nimport { Loading } from '../loading/Loading'\r\nimport styles from '../../styles/ChallengesList.module.scss'\r\n\r\nexport const ChallengesList = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        ChallengesRequest()\r\n            .then(challenges => {\r\n                dispatch(update(challenges))\r\n            })\r\n    }, [])\r\n\r\n    const challenges = useSelector(state => state.challenges.items)\r\n\r\n    return (\r\n        <div className={styles.background}>\r\n            {challenges.length ?\r\n                <React.Fragment>\r\n                    {challenges.map(challenge => {\r\n                        return <Challenge data={challenge} key={challenge._id} />\r\n                    })}\r\n                </React.Fragment> : <Loading />}\r\n        </div>)\r\n} ","import React from 'react'\r\nimport { ChallengesList } from '../components/challenges/ChallengesList'\r\n\r\nexport const Challenges = () => {\r\n\r\n    return <React.Fragment>\r\n        <ChallengesList />\r\n    </React.Fragment>\r\n}","import React, { useState } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from '../../styles/Task.module.scss'\r\nimport clsx from 'clsx';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Collapse, IconButton, TextField } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateReport, updateTaskState } from '../../redux/reducers/tasksSlice';\r\nimport { UpdateTaskRequest } from '../../requests/Request';\r\n\r\nexport const Task = ({ data }) => {\r\n    const [taskState] = useState({\r\n        InProgress: \"В процессе выполнения\",\r\n        Moderation: \"Проверяется модерацией\",\r\n        Confirmed: \"Выполнен\",\r\n        Declined: \"Провален\",\r\n        Cancelled: \"Отменен\"\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const parseDate = (date) => {\r\n        const d = new Date(date)\r\n        return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\r\n    }\r\n\r\n    const [isSave, setIsSaved] = useState(data.report || false)\r\n\r\n    const [expanded, setExpanded] = useState(false)\r\n\r\n    const [reportData, setReportData] = useState({\r\n        _id: data._id,\r\n        report: data.report,\r\n        images: ['test']\r\n    })\r\n\r\n    const [errors, setErrors] = useState({\r\n        report: false,\r\n        images: false\r\n    })\r\n\r\n    const handleExpandClick = () => {\r\n        if (!expanded) {\r\n            setReportData({\r\n                _id: data._id,\r\n                report: data.report,\r\n                images: ['test']\r\n            })\r\n        }\r\n        setExpanded(!expanded)\r\n    }\r\n\r\n    const handleUpdateTaskState = (state) => {\r\n\r\n        const taskToUpdate = {\r\n            _id: data._id,\r\n            userId: data.user,\r\n            challengeId: data.challenge._id,\r\n            state: state,\r\n            report: data.report,\r\n            images: data.images,\r\n            score: data.score\r\n        }\r\n        if (state === \"Cancelled\") {\r\n            taskToUpdate.report = ''\r\n            taskToUpdate.imagex = []\r\n            setReportData({\r\n                ...reportData,\r\n                report: '',\r\n                images: []\r\n            })\r\n        }\r\n        setExpanded(false)\r\n        dispatch(updateTaskState(taskToUpdate))\r\n        UpdateTaskRequest(taskToUpdate)\r\n            .then(task => {\r\n                if (task) {\r\n                    setExpanded(false)\r\n                    dispatch(updateTaskState(task))\r\n                } else {\r\n                    console.log('task doesnt update')\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleChange = (event, field) => {\r\n        setReportData({ ...reportData, [field]: event.target.value })\r\n        setIsSaved(false)\r\n    }\r\n\r\n    const handleSaveReport = () => {\r\n        if (!checkErrors()) {\r\n            const taskToUpdate = {\r\n                _id: data._id,\r\n                userId: data.user,\r\n                challengeId: data.challenge._id,\r\n                state: data.state,\r\n                report: reportData.report,\r\n                images: reportData.images,\r\n                score: data.score\r\n            }\r\n            //Update task locally before sending request\r\n            dispatch(updateReport(reportData))\r\n            setIsSaved(true)\r\n            UpdateTaskRequest(taskToUpdate)\r\n                .then(task => {\r\n                    if (task) {\r\n                        dispatch(updateReport(reportData))\r\n                        setIsSaved(true)\r\n                    } else {\r\n                        console.log('task doesnt update')\r\n                    }\r\n                })\r\n        } else {\r\n            console.log('errors')\r\n        }\r\n    }\r\n\r\n    const checkErrors = () => {\r\n        let error = {}\r\n        const detectErrors = Object.keys(reportData).map(key => {\r\n            if (reportData[key].length === 0) {\r\n                error[key] = true\r\n                return true\r\n            }\r\n            else {\r\n                error[key] = false\r\n                return false\r\n            }\r\n        })\r\n        if (detectErrors.find(el => el === true)) {\r\n            setErrors(error)\r\n            return true\r\n        } else {\r\n            setErrors(error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={styles.background}>\r\n            <CardMedia\r\n                component=\"img\"\r\n                alt=\"task image\"\r\n                height=\"180\"\r\n                image={data.challenge.image}\r\n                title=\"Task\"\r\n            />\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom variant=\"h6\" component=\"h2\">\r\n                    {data.challenge.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    {data.challenge.description}\r\n                </Typography>\r\n                <div className={styles.challengeInfo}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {`Максимальный бал: ${data.challenge.maxScore}`}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {`Твой бал: ${data.score}`}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {`Истекает: ${parseDate(data.challenge.finishDate)}`}\r\n                    </Typography>\r\n                </div>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button\r\n                    disabled={data.state !== \"InProgress\" || (!data.report || !data.images || data.report.length === 0 || data.images.length === 0)}\r\n                    onClick={() => handleUpdateTaskState(\"Moderation\")}\r\n                    className={styles.acceptButton}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\">\r\n                    {data.state !== \"InProgress\" ? `${taskState[data.state]}` : 'Завершить челлендж'}\r\n                </Button>\r\n                <IconButton\r\n                    className={clsx(styles.expand, {\r\n                        [styles.expandOpen]: expanded,\r\n                    })}\r\n                    onClick={handleExpandClick}\r\n                    aria-expanded={expanded}\r\n                    aria-label=\"show more\"\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent className={styles.reportBackground}>\r\n                    <TextField\r\n                        disabled={data.state !== \"InProgress\"}\r\n                        color=\"secondary\"\r\n                        id=\"task-report\"\r\n                        label=\"Описание\"\r\n                        multiline\r\n                        onChange={(e) => handleChange(e, 'report')}\r\n                        error={errors.report}\r\n                        value={reportData.report}\r\n                        helperText={errors.report && 'Поле не должно быть пустым'}\r\n                    />\r\n                    <Button\r\n                        onClick={handleSaveReport}\r\n                        className={styles.saveReportButton}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        disabled={isSave || data.state !== \"InProgress\"}>\r\n                        Сохранить\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        onClick={() => handleUpdateTaskState(\"Cancelled\")}\r\n                        className={styles.saveReportButton}\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        disabled={data.state !== \"InProgress\"}>\r\n                        Отказаться от челенджа\r\n                    </Button>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Task } from './Task'\r\nimport { Loading } from '../loading/Loading'\r\nimport styles from '../../styles/TasksList.module.scss'\r\nimport { TasksRequest } from '../../requests/Request'\r\nimport { updateTasks } from '../../redux/reducers/tasksSlice'\r\n\r\nexport const TasksList = () => {\r\n\r\n    const tasks = useSelector(state => state.tasks.elements)\r\n    const userId = useSelector(state => state.user.user._id)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        TasksRequest(userId)\r\n            .then(tasks => {\r\n                if (tasks) {\r\n                    dispatch(updateTasks(tasks))\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.background}>\r\n            {tasks.length ?\r\n                <React.Fragment>\r\n                    {tasks.map(task => {\r\n                        return <Task data={task} key={task._id} />\r\n                    })}\r\n                </React.Fragment> : <Loading />}\r\n        </div>)\r\n}","import React from 'react'\r\nimport { TasksList } from '../components/tasks/TasksList'\r\n\r\nexport const Tasks = () => {\r\n\r\n    return <React.Fragment>\r\n        <TasksList />\r\n    </React.Fragment>\r\n}","import React, { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport styles from '../../styles/Menu.module.scss'\r\nimport clsx from 'clsx';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport const Menu = () => {\r\n\r\n    const [page, setPage] = useState('tasks');\r\n\r\n    const handlePageChange = (event, newValue) => {\r\n        setPage(newValue);\r\n    };\r\n\r\n    return (\r\n        <BottomNavigation className={styles.background} showLabels value={page} onChange={handlePageChange}>\r\n            <BottomNavigationAction\r\n                className={clsx(styles.item, {\r\n                    [styles.selected]: (page === \"challenges\"),\r\n                })}\r\n                label=\"Челенджи\"\r\n                value=\"challenges\"\r\n                icon={<ListAltIcon />}\r\n                component={Link}\r\n                to=\"/challenges\"\r\n            />\r\n            <BottomNavigationAction\r\n                className={clsx(styles.item, {\r\n                    [styles.selected]: (page === \"tasks\"),\r\n                })}\r\n                label=\"Задания\"\r\n                value=\"tasks\"\r\n                icon={<AssignmentIcon />}\r\n                component={Link}\r\n                to=\"/tasks\"\r\n            />\r\n        </BottomNavigation>\r\n    );\r\n}","import React from 'react';\r\nimport { Menu } from './components/menu/Menu';\r\n\r\nexport const PagesConstructor = ({ page: Page }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Page />\r\n            <Menu />\r\n        </React.Fragment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\nimport { Login } from './pages/Login'\nimport { PrivateRoute, PublicRoute } from './AuthRoute'\nimport { Challenges } from './pages/Challenges'\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch\n} from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChallengesRequest, LoginByIdRequest, TasksRequest } from './requests/Request';\nimport { updateTasks } from './redux/reducers/tasksSlice';\nimport { Tasks } from './pages/Tasks';\nimport { getUserId, setUserId } from './db/dbApi';\nimport { logIn, updateUser } from './redux/reducers/userSlice';\nimport { Loading } from './components/loading/Loading';\nimport { PagesConstructor } from './PagesConstructor';\nimport { update } from './redux/reducers/challengesSlice';\n\n\nconst App = () => {\n\n  const isLogin = useSelector(state => state.user.isLogin)\n  const userId = useSelector(state => state.user.user && state.user.user._id)\n\n  const [isLoading, setLoading] = useState(true)\n\n  const dispatch = useDispatch()\n\n  // load tasks challenges if id exist\n  useEffect(() => {\n    if (isLogin) {\n      ChallengesRequest()\n            .then(challenges => {\n                dispatch(update(challenges))\n            })\n      TasksRequest(userId)\n        .then(tasks => {\n          if (tasks) {\n            dispatch(updateTasks(tasks))\n          }\n        })\n    }\n  }, [isLogin])\n\n\n  // Auto login if id exist\n  useEffect(() => {\n    getUserId()\n      .then(id => {\n        if (id) {\n          LoginByIdRequest(id)\n            .then(user => {\n              if (user) {\n                dispatch(updateUser(user))\n                dispatch(logIn())\n                setLoading(false)\n              } else {\n                setUserId(null)\n                setLoading(false)\n              }\n            })\n        } else {\n          setLoading(false)\n        }\n      })\n  }, [isLogin])\n\n  return (\n    isLoading ? <Loading /> :\n      <Router basename=\"/template-task\">\n        <Switch>\n          <PublicRoute restricted={true} component={Login} path=\"/login\" exact />\n          <PrivateRoute component={PagesConstructor} page={Tasks} path=\"/tasks\" exact />\n          <PrivateRoute component={PagesConstructor} page={Challenges} path=\"/challenges\" exact />\n          <Redirect to=\"/login\" />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'Work on localhost'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport tasksReducer from './reducers/tasksSlice'\r\nimport userReducer from './reducers/userSlice'\r\nimport challengesReducer from  './reducers/challengesSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        user: userReducer,\r\n        challenges: challengesReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\nimport theme from './styles/theme.scss'\nimport './styles/global.scss'\nimport { ThemeProvider, StylesProvider, createMuiTheme } from '@material-ui/core/styles'\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'https://f1f45c525785.ngrok.io'\n\n\n//Handler for BroadCastUpdate\n/* navigator.serviceWorker.addEventListener('message', async (event) => {\n\n  // Optional: ensure the message came from workbox-broadcast-update\n  if (event.data.meta === 'workbox-broadcast-update') {\n    const { cacheName, updatedUrl } = event.data.payload;\n\n    // Do something with cacheName and updatedUrl.\n    // For example, get the cached content and update\n    // the content on the page.\n    console.log(event.data)\n    const cache = await caches.open(cacheName);\n    const updatedResponse = await cache.match(updatedUrl);\n    console.log(updatedResponse.body)\n  }\n}); */\n\nconst themeMui = createMuiTheme({\n  palette: {\n    primary: {\n      light: theme.primaryLight,\n      main: theme.primaryMain,\n      dark: theme.primaryDark,\n      contrastText: theme.primaryText\n    },\n    secondary: {\n      light: theme.secondaryLight,\n      main: theme.secondaryMain,\n      dark: theme.secondaryDark,\n      contrastText: theme.secondaryText\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Open Sans', 'Roboto', 'Arial'\n    ].join(',')\n  }\n})\n\nserviceWorker.register();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={themeMui}>\n          <App />\n        </ThemeProvider>\n      </StylesProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nNotification.requestPermission(function (status) {\n  console.log('Notification permission status:', status);\n});","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"Task_background__2SXkR\",\"challengeInfo\":\"Task_challengeInfo__3R8B9\",\"acceptButton\":\"Task_acceptButton__3sb7G\",\"expand\":\"Task_expand__1af3O\",\"expandOpen\":\"Task_expandOpen__1PJfp\",\"reportBackground\":\"Task_reportBackground__2cDS2\",\"saveReportButton\":\"Task_saveReportButton__2kpFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"Menu_background__1EcTJ\",\"item\":\"Menu_item__1WHbu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"LoginForm_background__2j78L\",\"loginInput\":\"LoginForm_loginInput__3HSUu\",\"loginButton\":\"LoginForm_loginButton__1ZTv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"Challenge_background__3LPUE\",\"challengeInfo\":\"Challenge_challengeInfo__3ywmc\",\"acceptButton\":\"Challenge_acceptButton__2X5fa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"LoginPage_background__2-RHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"Loading_loadingContainer__vZjJV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"ChallengesList_background__1Dy0t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryLight\":\"#fff\",\"primaryMain\":\"#e0e0e0\",\"primaryDark\":\"#aeaeae\",\"primaryText\":\"#000\",\"secondaryLight\":\"#8d8d8d\",\"secondaryMain\":\"#606060\",\"secondaryDark\":\"#363636\",\"secondaryText\":\"#fff\",\"background\":\"TasksList_background__2Zchh\"};"],"sourceRoot":""}