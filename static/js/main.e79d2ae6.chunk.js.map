{"version":3,"sources":["notifications.js","components/Task.js","App.js","serviceWorker.js","index.js"],"names":["displayNotification","text","Notification","permission","navigator","serviceWorker","getRegistration","then","reg","options","body","icon","vibrate","actions","action","title","showNotification","CompleteButton","withStyles","theme","root","color","palette","getContrastText","green","backgroundColor","Button","DeleteButton","marginLeft","red","useStyles","makeStyles","task","height","margin","maxWidth","minWidth","taskComplete","background","Task","data","handleUpdateTask","classes","useState","taskInfo","setInfo","isLoading","setLoading","useEffect","isDeleted","Card","className","clsx","status","style","CardActionArea","onClick","CardContent","Typography","gutterBottom","variant","component","name","description","Divider","CardActions","disableSpacing","disabled","size","EditableTask","lazy","position","width","overflow","display","justifyContent","alignItems","flexWrap","fab","bottom","spacing","right","common","white","JSONdb","id","App","db","setDB","openEditTask","setOpenEditTask","taskDataToUpdate","setTaskDataToUpdate","fetch","response","json","console","log","openForm","dataToUpdate","Loading","fallback","map","key","Fab","aria-label","open","handleClose","updateIndex","findIndex","element","newData","update","$merge","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","requestPermission","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e79d2ae6.chunk.js","sourcesContent":["\r\n\r\nexport const displayNotification = (text) => {\r\n    if (Notification.permission == 'granted') {\r\n        navigator.serviceWorker.getRegistration().then((reg) => {\r\n            let options = {\r\n                body: text,\r\n                icon: 'favicon.ico',\r\n                vibrate: [100, 50, 100],\r\n                actions: [\r\n                    {\r\n                        action: 'close', title: 'Закрыть'\r\n                    }\r\n                ]\r\n            }\r\n            reg.showNotification('Template task', options)\r\n        })\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { displayNotification } from '../notifications'\r\n\r\nconst CompleteButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(green[500]),\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst DeleteButton = withStyles((theme) => ({\r\n  root: {\r\n    marginLeft: 'auto',\r\n    color: theme.palette.getContrastText(red[700]),\r\n    backgroundColor: red[700],\r\n    '&:hover': {\r\n      backgroundColor: red[900],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  task: {\r\n    height: 'fit-content;',\r\n    margin: '35px;',\r\n    maxWidth: '800px;',\r\n    minWidth: '300px;',\r\n  },\r\n  taskComplete: {\r\n    background: '#4caf50'\r\n  },\r\n}));\r\n\r\nfunction Task({ data, handleUpdateTask }) {\r\n  const classes = useStyles()\r\n\r\n  const [taskInfo, setInfo] = useState(data)\r\n\r\n  const [isLoading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setInfo(data)\r\n    setLoading(false)\r\n  }, [data])\r\n\r\n  const completeTask = () => {\r\n    setInfo({ ...taskInfo, status: \"Завершено\" })\r\n    displayNotification('😃 Добавлено новое задание 😃')\r\n  }\r\n\r\n  const deleteTask = () => {\r\n    setInfo({ ...taskInfo, isDeleted: true })\r\n    displayNotification('😯 Ты удалил задание 😯')\r\n  }\r\n\r\n  return (\r\n    isLoading ? <></> :\r\n      taskInfo.isDeleted ? <></> :\r\n        <Card\r\n          className={clsx(classes.task, taskInfo.status === \"Завершено\" && classes.taskComplete)}\r\n          style={{ backgroundColor: taskInfo.status === \"Завершено\" && \"#b4e8b4\" }}>\r\n          <CardActionArea onClick={() => handleUpdateTask(taskInfo)}>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {taskInfo.name}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {taskInfo.description}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <Divider />\r\n          <CardActions disableSpacing>\r\n            <CompleteButton disabled={taskInfo.status === \"Завершено\"} onClick={completeTask} size=\"medium\">{taskInfo.status === \"Завершено\" ? 'Завершено' : 'Завершить'}</CompleteButton>\r\n            <DeleteButton onClick={deleteTask} size=\"medium\">{'Удалить'}</DeleteButton>\r\n          </CardActions>\r\n        </Card>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport './App.css';\nimport Task from './components/Task'\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport update from 'react-addons-update';\nconst EditableTask = lazy(() => import('./components/EditableTask'));\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: '#eeeeee',\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'auto',\n    display: 'flex',\n    justifyContent: 'space-evenly;',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  },\n  fab: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[600],\n    }\n  },\n}));\n\nconst JSONdb = [\n  {\n    id: \"1\",\n    name: \"Task1\",\n    status: \"В процессе\",\n    description: \"Особое задание для продвинутых\",\n    isDeleted: false,\n  },\n  {\n    id: \"2\",\n    name: \"Task2\",\n    status: \"В процессе\",\n    description: \"Очень простое задание\",\n    isDeleted: false,\n  },\n  {\n    id: \"3\",\n    name: \"Task3\",\n    status: \"В процессе\",\n    description: \"Тут нужно подумать\",\n    isDeleted: false,\n  },\n  {\n    id: \"4\",\n    name: \"Task4\",\n    status: \"В процессе\",\n    description: \"Особое задание для продвинутых\",\n    isDeleted: false,\n  },\n  {\n    id: \"5\",\n    name: \"Task5\",\n    status: \"В процессе\",\n    description: \"Очень простое задание\",\n    isDeleted: false,\n  },\n  {\n    id: \"6\",\n    name: \"Task6\",\n    status: \"В процессе\",\n    description: \"Тут нужно подумать\",\n    isDeleted: false,\n  },\n]\n\nfunction App() {\n  const classes = useStyles();\n  const [db, setDB] = useState([...JSONdb])\n  const [openEditTask, setOpenEditTask] = useState(false)\n  const [taskDataToUpdate, setTaskDataToUpdate] = useState(null)\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n      .then(response => response.json())\n      .then(json => console.log(json))\n  }, [])\n\n  const addTask = (data) => {\n    if (data) {\n      const updateIndex = db.findIndex(element => element.id === data.id)\n      if (updateIndex !== -1) {\n        const newData = update(db, {\n          [updateIndex]: { $merge: data }\n        })\n        setDB([...newData])\n      } else {\n        setDB([...db, data])\n      }\n    }\n    setTaskDataToUpdate(null)\n    setOpenEditTask(false)\n  }\n\n  const openForm = (dataToUpdate) => {\n    if (dataToUpdate) {\n      setTaskDataToUpdate(dataToUpdate)\n      setOpenEditTask(true)\n    } else {\n      setTaskDataToUpdate(null)\n      setOpenEditTask(true)\n    }\n  }\n\n  const Loading = () => {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      <Suspense fallback={<Loading />}>\n        {db.map(task => {\n          return <Task key={task.id} data={task} handleUpdateTask={openForm} />\n        })}\n        <Fab\n          className={classes.fab} aria-label=\"add\"\n          onClick={() => openForm(null)}>\n          <AddIcon />\n        </Fab>\n        <EditableTask taskDataToUpdate={taskDataToUpdate} open={openEditTask} handleClose={addTask} />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nNotification.requestPermission(function(status) {\n  console.log('Notification permission status:', status);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}